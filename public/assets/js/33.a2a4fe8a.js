(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{514:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"写在前面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[s._v("#")]),s._v(" 写在前面")]),s._v(" "),t("p",[s._v("   Pandas 常用 api 总结！//转载自https://www.jianshu.com/p/c51a21503c0c，侵删\n  pandas 作为 python 在数据科学领域关键包之一，熟练其 API 是必备的."),t("br"),s._v("\n我们使用如下缩写："),t("br"),s._v("\n  df：任意的 Pandas DataFrame 对象"),t("br"),s._v("\n  s：任意的 Pandas Series 对象"),t("br"),s._v("\n同时我们需要做如下的引入："),t("br"),s._v("\n  import pandas as pd"),t("br"),s._v("\n  import numpy as np")]),s._v(" "),t("h2",{attrs:{id:"series-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#series-对象"}},[s._v("#")]),s._v(" Series 对象")]),s._v(" "),t("p",[s._v("  Series 是 Pandas 中最基本的对象，基于 NumPy 的数组对象来的，和 NumPy 的数组不同的是，Series 能为数据自定义标签，就是索引（index），然后通过索引来访问数组中的数据。"),t("br"),s._v(" "),t("strong",[s._v("1、创建 Series 对象并省略索引")]),s._v("\n  sel = Series([1,2,3,4])")]),s._v(" "),t("p",[t("strong",[s._v("2、自己创建索引")]),t("br"),s._v("\nsel = Series(data = [1,2,3,4],index=['a','b','c','d'])"),t("br"),s._v("\nsel = Series(data = [1,2,3,4],index=list('abcd'))")]),s._v(" "),t("p",[t("strong",[s._v("3、获取索引")]),t("br"),s._v("\nsel.index")]),s._v(" "),t("p",[t("strong",[s._v("4、获取 value 值")]),t("br"),s._v("\nsel.values")]),s._v(" "),t("p",[t("strong",[s._v("5、获取索引和值,类型键值对（字典）")]),t("br"),s._v("\nlist(sel.iteritems())")]),s._v(" "),t("p",[t("strong",[s._v("6、将字典转为 Series")]),t("br"),s._v("\nSeries(dict)")]),s._v(" "),t("p",[t("strong",[s._v("7、Series 对象同时支持位置和索引两种方式获取数据")]),t("br"),s._v("\n\"索引小标：\",sel['c']"),t("br"),s._v('\n"位置小标：",sel[2]')]),s._v(" "),t("p",[t("strong",[s._v("8、获取不连续的数据")]),t("br"),s._v("\n\"位置小标：\",sel[['a','c']]"),t("br"),s._v('\n"索引小标：",sel[[1,3]]')]),s._v(" "),t("p",[t("strong",[s._v("9、可以使用切片获取数据")]),t("br"),s._v("\n'位置切片：','\\n',sel[1:3] 左闭右开"),t("br"),s._v("\n'索引切片：','\\n',sel['b':'d'] 左右都包含")]),s._v(" "),t("p",[t("strong",[s._v("10、重新赋值索引的值")]),s._v("\nreindex 重新定义索引，会返回一个新的 Series（调用 reindex 将会重新排序，缺失的值则用 Nan 填补）"),t("br"),s._v("\nsel.reindex(['d','a','c','d','e'])"),t("br"),s._v("\n并且随着缺失值 nan 的填值，value 将会变成 float 类型，因为 nan 是 float 类型")]),s._v(" "),t("p",[t("strong",[s._v("11、Drop 丢掉指定轴上的项（删除）")]),t("br"),s._v("\nsel4.drop([2,3]) 删除了索引是 2,3 的值")]),s._v(" "),t("p",[t("strong",[s._v("12、处理 NaN 空值，过滤缺失数据")]),t("br"),s._v("\ndropna()：将 NaN 数据过滤掉，只要包含 NaN 就都过滤掉"),t("br"),s._v("\nnotnull()：布尔类型 bool，缺失的数据显示的是 False"),t("br"),s._v("\nisnull()：布尔类型 bool，缺失数据 False"),t("br"),s._v(" "),t("strong",[s._v("13、Series 进行算数运算操作")])]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("series1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Series"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Londn'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HongKong'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Humbai'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lagos'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("series2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Series"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Londn'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Accra'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lagos'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Delhi'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("series1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" series2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("series1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" series2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("series1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" series2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("如果 pandas 在两个 Series 中找不到相同的 index，对应位置就返回一个空值 NaN")]),s._v(" "),t("p",[s._v("同样也支持 Numpy 的数组运算")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[s._v("sel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Series"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abcd'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sel"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出大于3的值，布尔数组过滤")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sel"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#给所有数据乘以2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("np"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("square"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#value的平方值")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"导入数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入数据"}},[s._v("#")]),s._v(" 导入数据")]),s._v(" "),t("p",[s._v("  pd.read_csv(filename)：从 CSV 文件导入数据"),t("br"),s._v("\n  pd.read_table(filename)：从限定分隔符的文本文件导入数据"),t("br"),s._v("\n  pd.read_excel(filename)：从 Excel 文件导入数据"),t("br"),s._v("\n  pd.read_sql(query, connection_object)：从 SQL 表/库导入数据"),t("br"),s._v("\n  pd.read_json(json_string)：从 JSON 格式的字符串导入数据"),t("br"),s._v("\n  pd.read_html(url)：解析 URL、字符串或者 HTML 文件，抽取其中的 tables 表格"),t("br"),s._v("\n  pd.read_clipboard()：从你的粘贴板获取内容，并传给 read_table()"),t("br"),s._v("\n  pd.DataFrame(dict)：从字典对象导入数据，Key 是列名，Value 是数据")]),s._v(" "),t("h2",{attrs:{id:"导出数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出数据"}},[s._v("#")]),s._v(" 导出数据")]),s._v(" "),t("p",[s._v("  df.to_csv(filename)：导出数据到 CSV 文件"),t("br"),s._v("\n  df.to_excel(filename)：导出数据到 Excel 文件"),t("br"),s._v("\n  df.to_sql(table_name, connection_object)：导出数据到 SQL 表"),t("br"),s._v("\n  df.to_json(filename)：以 Json 格式导出数据到文本文件")]),s._v(" "),t("h2",{attrs:{id:"创建测试对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建测试对象"}},[s._v("#")]),s._v(" 创建测试对象")]),s._v(" "),t("p",[s._v("  pd.DataFrame(np.random.rand(20,5))：创建 20 行 5 列的随机数组成的 DataFrame 对象"),t("br"),s._v("\n  pd.Series(my_list)：从可迭代对象 my_list 创建一个 Series 对象"),t("br"),s._v("\n  df.index = pd.date_range('1900/1/30', periods=df.shape[0])：增加一个日期索引")]),s._v(" "),t("h2",{attrs:{id:"查看、检查数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看、检查数据"}},[s._v("#")]),s._v(" 查看、检查数据")]),s._v(" "),t("p",[s._v("  df.head(n)：查看 DataFrame 对象的前 n 行"),t("br"),s._v("\n  df.tail(n)：查看 DataFrame 对象的最后 n 行"),t("br"),s._v("\n  df.shape[0], df.shape[1]：分别查看行数和列数"),t("br"),s._v("\n  df.info()：查看索引、数据类型和内存信息"),t("br"),s._v("\n  df.describe()：查看数值型列的汇总统计"),t("br"),s._v("\n  s.value_counts(dropna=False)：查看 Series 对象的唯一值和计数"),t("br"),s._v("\n  s.count() ：非空值数量"),t("br"),s._v("\n  df.apply(pd.Series.value_counts)：查看 DataFrame 对象中每一列的唯一值和计数")]),s._v(" "),t("h2",{attrs:{id:"数据选取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据选取"}},[s._v("#")]),s._v(" 数据选取")]),s._v(" "),t("p",[s._v("  df[col]：根据列名，并以 Series 的形式返回列")]),s._v(" "),t("p",[s._v("  df[[col1, col2]]：以 DataFrame 形式返回多列")]),s._v(" "),t("p",[s._v("  s.iloc[0]：按位置选取数据")]),s._v(" "),t("p",[s._v("  s.loc['index_one']：按索引选取数据")]),s._v(" "),t("p",[s._v("  df.iloc[0,:]：返回第一行")]),s._v(" "),t("p",[s._v("  df.iloc[0,0]：返回第一列的第一个元素")]),s._v(" "),t("h2",{attrs:{id:"数据清理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据清理"}},[s._v("#")]),s._v(" 数据清理")]),s._v(" "),t("p",[s._v("  df.columns = ['a','b','c']：重命名列名")]),s._v(" "),t("p",[s._v("  pd.isnull()：检查 DataFrame 对象中的空值，并返回一个 Boolean 数组")]),s._v(" "),t("p",[s._v("  pd.notnull()：检查 DataFrame 对象中的非空值，并返回一个 Boolean 数组")]),s._v(" "),t("p",[s._v("  df.dropna()：删除所有包含空值的行")]),s._v(" "),t("p",[s._v("  df.dropna(axis=1)：删除所有包含空值的列")]),s._v(" "),t("p",[s._v("  df.dropna(axis=1,thresh=n)：删除所有小于 n 个非空值的行")]),s._v(" "),t("p",[s._v("  df.fillna(x)：用 x 替换 DataFrame 对象中所有的空值")]),s._v(" "),t("p",[s._v("  s.astype(float)：将 Series 中的数据类型更改为 float 类型")]),s._v(" "),t("p",[s._v("  s.replace(1,'one')：用‘one’代替所有等于 1 的值")]),s._v(" "),t("p",[s._v("  s.replace([1,3],['one','three'])：用'one'代替 1，用'three'代替 3")]),s._v(" "),t("p",[s._v("  df.rename(columns=lambda x: x + 1)：批量更改列名")]),s._v(" "),t("p",[s._v("  df.rename(columns={'old"),t("em",[s._v("name': 'new")]),s._v(" name'})：选择性更改列名")]),s._v(" "),t("p",[s._v("  df.set_index('column_one')：更改索引列")]),s._v(" "),t("p",[s._v("  df.rename(index=lambda x: x + 1)：批量重命名索引")]),s._v(" "),t("h2",{attrs:{id:"数据处理-filter、sort-和-groupby"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据处理-filter、sort-和-groupby"}},[s._v("#")]),s._v(" 数据处理：Filter、Sort 和 GroupBy")]),s._v(" "),t("p",[s._v("  df[df[col] > 0.5]：选择 col 列的值大于 0.5 的行")]),s._v(" "),t("p",[s._v("  df.sort_values(col1)：按照列 col1 排序数据，默认升序排列")]),s._v(" "),t("p",[s._v("  df.sort_values(col2, ascending=False)：按照列 col1 降序排列数据")]),s._v(" "),t("p",[s._v("  df.sort_values([col1,col2], ascending=[True,False])：先按列 col1 升序排列，后按 col2 降序排列数据")]),s._v(" "),t("p",[s._v("  df.groupby(col)：返回一个按列 col 进行分组的 Groupby 对象")]),s._v(" "),t("p",[s._v("  df.groupby([col1,col2])：返回一个按多列进行分组的 Groupby 对象")]),s._v(" "),t("p",[s._v("  df.groupby(col1)[col2]：返回按列 col1 进行分组后，列 col2 的均值")]),s._v(" "),t("p",[s._v("  df.pivot_table(index=col1, values=[col2,col3], aggfunc=max)：创建一个按列 col1 进行分组，并计算 col2 和 col3 的最大值的数据透视表")]),s._v(" "),t("p",[s._v("  df.groupby(col1).agg(np.mean)：返回按列 col1 分组的所有列的均值")]),s._v(" "),t("p",[s._v("  data.apply(np.mean)：对 DataFrame 中的每一列应用函数 np.mean")]),s._v(" "),t("p",[s._v("  data.apply(np.max,axis=1)：对 DataFrame 中的每一行应用函数 np.max")]),s._v(" "),t("p",[s._v("  df.get_dummies() ：one-hot 编码")]),s._v(" "),t("p",[s._v("  s.map() , df.applymap()：映射")]),s._v(" "),t("h2",{attrs:{id:"数据合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据合并"}},[s._v("#")]),s._v(" 数据合并")]),s._v(" "),t("p",[s._v("  df1.append(df2)：将 df2 中的行添加到 df1 的尾部")]),s._v(" "),t("p",[s._v("  df.concat([df1, df2],axis=1)：将 df2 中的列添加到 df1 的尾部")]),s._v(" "),t("p",[s._v("  df1.join(df2,on=col1,how='inner')：对 df1 的列和 df2 的列执行 SQL 形式的 join")]),s._v(" "),t("h2",{attrs:{id:"数据统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据统计"}},[s._v("#")]),s._v(" 数据统计")]),s._v(" "),t("p",[s._v("  df.describe()：查看数据值列的汇总统计")]),s._v(" "),t("p",[s._v("  df.mean()：返回所有列的均值")]),s._v(" "),t("p",[s._v("  df.corr()：返回列与列之间的相关系数")]),s._v(" "),t("p",[s._v("  df.count()：返回每一列中的非空值的个数")]),s._v(" "),t("p",[s._v("  df.max()：返回每一列的最大值")]),s._v(" "),t("p",[s._v("  df.min()：返回每一列的最小值")]),s._v(" "),t("p",[s._v("  df.median()：返回每一列的中位数")]),s._v(" "),t("p",[s._v("  df.std()：返回每一列的标准差")])])}),[],!1,null,null,null);a.default=e.exports}}]);